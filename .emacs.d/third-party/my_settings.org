* basic settings
** some common settings

 M-x tabify: Change spaces to tabs where appropriate.
 M-x untabify: Change all tabs to the correct number of spaces (controlled by tab-width).

#+BEGIN_SRC emacs-lisp
   (setq tab-width 4)
   (setq indent-tabs-mode nil)
#+END_SRC
 

*** revert all buffers
#+BEGIN_SRC emacs-lisp
  (defun revert-all-buffers ()
    "Refreshes all open buffers from their respective files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
          (revert-buffer t t t) )))
    (message "Refreshed open files.") )
#+END_SRC

    
** settings for org-mode

#+BEGIN_SRC emacs-lisp
    ;;use ibuffer
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
    ;;(setq org-ellipsis "⤵")
    (require 'org)

    ; stop emacs from confirmaing evaluating
    (setq org-confirm-babel-evaluate nil)

    ;; turn on syntax coloring for embedded source code
    (setq org-src-fontify-natively t)

    (require 'ob)

    ;;allow org-mode to evaluate some language
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (clojure . t)
       (C . t)
       ;(C++ . t)
       (python . t)
       (ruby . t)))

    ;;;;The following lines are always needed. Choose your own keys.
    (global-set-key (kbd "C-c o s ") 'org-store-link)
    (global-set-key (kbd "C-c o a") 'org-agenda)
    (global-set-key (kbd "C-c o c") 'org-capture)
    (global-set-key (kbd "C-c o b") 'org-iswitchb)
    (setq org-log-done 'time)

    (defun  my-org-mode-hook()
          (define-key org-mode-map (kbd "C-c o i")        'org-insert-link)
          (define-key org-mode-map (kbd "C-c o n t" )     'org-insert-todo-heading)
          (define-key org-mode-map (kbd "C-c o n h" )     'org-insert-heading)
          (define-key org-mode-map (kbd "C-c o o")        'org-open-at-point)

          ;; these key bindings are used for terminal since default binding 
          ;; M-S left/right/up/down does not work
          (define-key org-mode-map (kbd "C-c o h")    'outline-promote)
          (define-key org-mode-map (kbd "C-c o l")    'outline-demote)
          (define-key org-mode-map (kbd "C-c o k")    'outline-move-subtree-up)
          (define-key org-mode-map (kbd "C-c o j")    'outline-move-subtree-down)

          (if (string-lessp org-version "9.0")
              (setq org-latex-create-formula-image-program 'dvipng)  ;; for org-version before 9.0
              (setq org-preview-latex-default-process 'dvipng)   ;; for org-version >=9.0
          )
    )

    (add-hook 'org-mode-hook   'my-org-mode-hook)
    (add-hook 'org-mode-hook   'turn-on-org-cdlatex)
    
    (defun update-org-latex-fragment-scale ()
        (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
         (plist-put org-format-latex-options :scale (* 1.2 text-scale-factor)))
    )

    (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)

    ;;; by default use C-c C-x C-l to preview math equations
    (define-key org-mode-map (kbd "C-c o p p") 'org-preview-latex-fragment)


;;;   (defun  org-preview-latex-subtree ()
;;;        (interactive)
;;;        (setq current-prefix-arg 4)
;;;        (call-interactively 'org-preview-latex-fragment)
;;;   )
;;;
;;;   (define-key org-mode-map (kbd "C-c o p s") 'org-preview-latex-subtree)
;;;
;;;   (defun  org-preview-latex-buffer()
;;;        (interactive)
;;;        (setq current-prefix-arg 16)
;;;        (call-interactively 'org-preview-latex-fragment)
;;;   )
;;;
;;;  (define-key org-mode-map (kbd "C-c o p b") 'org-preview-latex-buffer)

    ;;;call functions with prefix arguments
;;;   (define-key org-mode-map (kbd "C-c o p s") '(lambda ()
;;;        (interactive)
;;;        (setq current-prefix-arg 4)     ;;;C-u
;;;        (call-interactively 'org-preview-latex-fragment))
;;;   )

;;;   (define-key org-mode-map (kbd "C-c o p b") '(lambda ()
;;;        (interactive)
;;;        (setq current-prefix-arg 16) ;;C-u C-u
;;;        (call-interactively 'org-preview-latex-fragment))
;;;   )

   (define-key org-mode-map (kbd "C-c o p s") '(lambda ()
        (interactive)
        (let ((current-prefix-arg 4)) ;;C-u
        (call-interactively 'org-preview-latex-fragment)))
   )

   (define-key org-mode-map (kbd "C-c o p b") '(lambda ()
        (interactive)
        (let ((current-prefix-arg 16)) ;;C-u C-u
        (call-interactively 'org-preview-latex-fragment)))
   )
#+END_SRC



*** set up pretty bullets for org-mode

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  (add-to-list 'load-path (expand-file-name "~/.emacs.d/third-party/org-bullets"))

  ;(setq org-bullets-bullet-list '( "◉" "○" "✸" "✿"))

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-hide-leading-stars t)
#+END_SRC
    

** settings for gnus
   
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/third-party")
  (load "my_gnus.el")
#+END_SRC

   
** settings for ACUteX

*** preview-latex
     preview-latex (also known as PreviewLaTeX) is an integrated part of AUCTeX as of 
     version 11.80, which allows you to see previews of math, figures, tables, 
     graphics and other things directly in an Emacs 21 buffer. It was released 
     separately in the past, but always required AUCTeX to run.

*** CDLaTeX

     CDLaTeX is a minor mode, supporting fast insertion of environment templates and
     math stuff in LaTeX, written by CarstenDominik. CDLaTeX tries to be quick, with
     very few and easy to remember keys, and intelligent on-the-fly help. As a minor
     mode, you can use it in AUCTeX.

#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa/auctex-12.1.0"))
    (load "auctex.el" nil t t)

    (require 'tex-mik)

    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)

    (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
    
    (defun  my-LaTex-mode-hook()
        (setq TeX-PDF-mode nil)
        (setq reftex-plug-into-AUCTeX t)

        (visual-line-mode)
        (flyspell-mode)
        (LaTeX-math-mode)
        (turn-on-cdlatex)
        (turn-on-reftex)

        ;;make another mapping for math symbols since default mapping "`" does not work for some platforms
        (define-key LaTeX-mode-map (kbd "C-c l s")    #'cdlatex-math-symbol)                ; C-c l s

        ;;key mappings for latex preview command
        (define-key LaTeX-mode-map (kbd "C-c l p p")    #'preview-at-point)                ; C-c l p p
        (define-key LaTeX-mode-map (kbd "C-c l p r")    #'preview-region)                  ; C-c l p r
        (define-key LaTeX-mode-map (kbd "C-c l p b")    #'preview-buffer)                  ; C-c l p b
        (define-key LaTeX-mode-map (kbd "C-c l p d")    #'preview-document)                ; C-c l p d
        (define-key LaTeX-mode-map (kbd "C-c l p e")    #'preview-environment)             ; C-c l p e
        (define-key LaTeX-mode-map (kbd "C-c l p s")    #'preview-section)                 ; C-c l p s
        (define-key LaTeX-mode-map (kbd "C-c l p w")    #'preview-copy-region-as-mml)      ; C-c l p w

        (define-key LaTeX-mode-map (kbd "C-c l p c p")    #'preview-clearout-at-point)     ; C-c l p c p
        (define-key LaTeX-mode-map (kbd "C-c l p c r")    #'preview-clearout)              ; C-c l p c r
        (define-key LaTeX-mode-map (kbd "C-c l p c d")    #'preview-clearout-document)     ; C-c l p c d
        (define-key LaTeX-mode-map (kbd "C-c l p c s")    #'preview-clearout-section)      ; C-c l p c s
        (define-key LaTeX-mode-map (kbd "C-c l p c b")    #'preview-clearout-buffer)       ; C-c l p c w

        (when (eq window-system 'w32)
            ;(setq preview-image-type 'png)
            (setq preview-gs-command (executable-find "gswin64c.exe"))
        )
    )

    (add-hook 'LaTeX-mode-hook 'my-LaTex-mode-hook)

    ;;; allow scale preview based on
    (defun update-latex-preview-scale ()
        (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
         (set-default 'preview-scale-function (* 1.2 text-scale-factor)))
    )

    (add-hook 'text-scale-mode-hook 'update-latex-preview-scale)
    


#+END_SRC

    don't generate pdf by default, use the following setting
    (setq TeX-PDF-mode nil)

    If it doesn’t work, try this
    (require 'tex)
    (TeX-global-PDF-mode nil)

    or (C-c C-t C-p). This command toggles the PDF mode of AUCTeX,
    a buffer-local minor mode which is enabled by default.

    You can customize TeX-PDF-mode to give it a different default or set it
    as a file local variable on a per-document basis. This option usually
    results in calling either PDFTeX or ordinary TeX.
    

*** document for CDLaTex minor mode
    CDLaTeX has an abbrev-like mechanism to insert full LaTeX environments and other 
    templates into the buffer. Abbreviation expansion is triggered with the TAB key only, 
    not with SPC or RET. For example, typing "ite" inserts an itemize environment. A full 
    list of defined abbreviations is available with the command C-c ? (cdlatex-command-help).
    
    
** setting for Macro
   #+BEGIN_SRC emacs-lisp
     ;(global-set-key (kbd "<f5>")  #'kmacro-start-macro)
     ;(global-set-key (kbd "<f6>")  #'kmacro-end-macro)
     (global-set-key (kbd "<f4>")  #'kmacro-start-macro-or-insert-counter)
     (global-set-key (kbd "<f5>")  #'kmacro-end-and-call-macro)

   #+END_SRC


** settings for bookmarks

#+BEGIN_SRC emacs-lisp
(require 'bookmark)
;(bookmark-bmenu-list)
;(switch-to-buffer "*Bookmark List*")
(setq bookmark-save-flag 1)

#+END_SRC

*** key bindings for bookmark
;;; https://www.emacswiki.org/emacs/BookMarks
;;;   Some keys in ‘*Bookmark List*’:
;;;
;;;       ‘a’ – show annotation for the current bookmark
;;;       ‘A’ – show all annotations for your bookmarks
;;;       ‘d’ – mark various entries for deletion (‘x’ – to delete them)
;;;       ‘e’ – edit the annotation for the current bookmark
;;;       ‘m’ – mark various entries for display and other operations, (‘v’ – to visit)
;;;       ‘o’ – visit the current bookmark in another window, keeping the bookmark list open
;;;       ‘C-o’ – switch to the current bookmark in another window
;;;       ‘r’ – rename the current bookmark



;;;================================================


** settings for bookmark+ 
#+BEGIN_SRC emacs-lisp
(setq bmkp-bookmark-map-prefix-keys (list (kbd "C-c b"))
      bmkp-jump-map-prefix-keys (list (kbd "C-c b j"))
      bmkp-jump-other-window-map-prefix-keys (list (kbd "C-c b 4 j"))
)

(require 'bookmark+)

(define-key bookmark-map (kbd "a b")    'bmkp-annotate-bookmark)         ; C-c b a b
(define-key bookmark-map (kbd "a s")    'bookmark-show-annotation)       ; C-c b a s
(define-key bookmark-map (kbd "a S")    'bookmark-show-all-annotations)  ; C-c b a S
(define-key bookmark-map (kbd "a e")    'bookmark-edit-annotation)       ; C-c b a e

(define-key bookmark-map (kbd "/ i")    'bmkp-insert-bookmark-link)     ; C-c b / i
(define-key bookmark-map (kbd "/ s")    'bmkp-store-org-link)           ; C-c b / s

(setq bookmark-bmenu-file-column 65)

(defun my-auto-line-column-name (position)
"Return a name for POSITION that uses line & column numbers."
	(let ((line  (line-number-at-pos position))
	  	 (col   (save-excursion
			   (goto-char position) (current-column)))
	  	 (total-line   (save-excursion
			   (end-of-buffer) 
			   (line-number-at-pos (point-max))))
		 )
  		 (format "line: %d of %d, col: %d, %s" line total-line col (buffer-name)))
)

(setq bmkp-autoname-bookmark-function #'my-auto-line-column-name)

;;; setting for autonamed bookmarks
;;; the follwoing configurations do not work 
;(add-hook 'kill-buffer-hook 'bmkp-delete-autonamed-this-buffer-no-confirm)
;(add-hook 'kill-emacs-hook  'bmkp-delete-autonamed-no-confirm)
#+END_SRC


*** key bindings
;;;show bmenu-list
;;; bookmark-bmenu-list
;;; C-c b e runs the command edit-bookmarks (found in global-map), which
;;;  is an alias for ‘bookmark-bmenu-list’ in ‘bookmark.el’.

;; show bookmark list
;;(define-key bookmark-map (kbd "e")    'bookmark-bmenu-list)             ; C-c b e 

;;;save bookmark list
;; (define-key bookmark-map (kbd "s")    'bookmark-save)                  ; C-c b s 

;; C-c b RET       'bmkp-toggle-autonamed-bookmark-set/delete
;; C-c b ?         'bmkp-describe-bookmark 

;;;show bookmark tags in a file
;; C-c b t e   'bmkp-edit-tags

T c     - Copy tags from this bookmark (for subsequent pasting)
T +     - Add some tags to a bookmark
T -     - Remove some tags from a bookmark (‘C-u’: from all bookmarks)
T 0     - Remove all tags from a bookmark
T d     - Remove some tags from all bookmarks
T r     - Rename a tag in all bookmarks
T l     - List all tags used in any bookmarks (‘C-u’: show tag values)
T > l   - List tags used in marked bookmarks  (‘C-u’: show tag values)  ;;bmkp-bmenu-list-tags-of-marked
T e     - Edit bookmark’s tags
T v     - Set the value of a tag (as attribute)
inside Bookmark list buffer, press C-h m to get more information


*** More key bindings for bookmark+
;;get help 
;; C-c b  C-h ;;; get all key bindings

;; (define-key bookmark-map "I"      'bookmark-insert-location)                          ; C-c b I
;; (define-key bookmark-map "L"      'bmkp-switch-bookmark-file-create)                  ; C-c b L
;; (define-key bookmark-map "s"      'bookmark-save)                                     ; C-c b s

;; (define-key bookmark-map "t + a"  'bmkp-tag-a-file)                                   ; C-c b t + a 
;; (define-key bookmark-map "t - a"  'bmkp-untag-a-file)                                 ; C-c b t - a 
;; (define-key bookmark-map "t + b"  'bmkp-add-tags)                                     ; C-c b t + b 
;; (define-key bookmark-map "t - b"  'bmkp-remove-tags)                                  ; C-c b t - b 
;; (define-key bookmark-map "t l"    'bmkp-list-all-tags)                                ; C-c b t l 
;;; bmkp-bookmark-a-file, bookmark a file without visiting it.      ;;; C-c b c a 

;;;; Tag Commands and Keys
;;;    They all have the prefix key ‘T’.
;;;    ‘m’ means mark
;;;    ‘u’ means unmark
;;;    `>’ stands for the marked bookmarks
;;;    ‘*’ means AND (set intersection; all)
;;;    `+’ means OR (set union; some/any)
;;;    `~’ means NOT (set complement)

;;; annotation
;;; In the ‘*Bookmark List*’ display, you can use ‘a’ to show or (with a prefix arg) 
;;; edit the existing annotation for the bookmark on the current line.

;;; Just as in Dired, you can use `% m’ to mark the bookmarks that match a regexp. 
;;; Then use `>’ to show only the marked bookmarks. See MarkingAndUnmarkingBookmarks, above.

;; Mark the bookmarks that have particular tags: `T m +’. Hit ‘RET’ to enter each tag you type, 
;; then hit ‘RET’/or M-RET with empty input when done.


** settings for tab 
   
#+BEGIN_SRC emacs-lisp
  (defun my-tab-width()
   (c-set-offset 'substatement-open 0)
   (setq c-basic-offset 4)
   (setq c-default-style "linux")
   (setq c-indent-level 4)
   (setq tab-width 4)
   (setq indent-tabs-mode nil)
  )

  ;;; use space for c/c++ instead of tab
  (add-hook 'c++-mode-hook    'my-tab-width)
  (add-hook 'c-mode-hook      'my-tab-width)

  ;;enable cscope mode on C/C++ file
  ;; using add-hook function
  (add-hook 'c++-mode-hook    'cscope-minor-mode)
  (add-hook 'c-mode-hook  'cscope-minor-mode)
#+END_SRC


python mode indent a block
 C-c <       ;;shift the region 4 space to the left
 C-c >       ;;shift the region 4 space to the right 
set tab to 2 for python code

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook '(lambda () 
   (setq python-indent 4)))
#+END_SRC


** settings for speedbar 
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)

  (setq speedbar-show-unknown-files t) ; show all files
  (setq speedbar-use-images nil) ; use text for buttons
  (setq sr-speedbar-right-side nil) ; put on left side
  (setq speedbar-tag-hierarchy-method nil)    ;; expand all tags
  (setq speedbar-sort-tags t)     ;;;sort tags

#+END_SRC

*** Enable case insensitive search in the speedbar window
#+BEGIN_SRC emacs-lisp
  (add-hook 'speedbar-mode-hook
            (lambda ()
            (setq case-fold-search t)))
#+END_SRC
;;
 ;;expand current file
;; (defun sb-expand-curren-file ()
;;   "Expand current file in speedbar buffer"
;;   (interactive)
;;   (setq current-file (buffer-file-name))
;;   (sr-speedbar-refresh)
;;   (switch-to-buffer-other-frame "*SPEEDBAR*")
;;   ;(switch-to-buffer "*SPEEDBAR*")
;;   ;(set-buffer "*SPEEDBAR*")
;;   ;(speedbar-find-selected-file current-file)
;;   (speedbar-expand-line)
;;   ;(find-file current-file) 
;;   )

some functions for expand tags in speedbar windows
;;expand current file

#+BEGIN_SRC emacs-lisp
  (defun sb-expand-curren-file ()
    "Expand current file in speedbar buffer"
    ;; (interactive)
    (setq current-file (buffer-file-name))
    (sr-speedbar-refresh)
    (select-window (get-buffer-window "*SPEEDBAR*"))
    (speedbar-find-selected-file current-file)
    (speedbar-expand-line)
  )

  ;;show tags for current file
   (defun sb-show-tags-for-curren-file ()
    "show tags for current file in speedbar buffer"
    (interactive)

    (setq current-file-buffer (buffer-name))
    (if (not (sr-speedbar-exist-p))
        (sr-speedbar-open))

    ;; return to the window which displays the current file
    (select-window (get-buffer-window current-file-buffer))
    (sb-expand-curren-file)

    (select-window (get-buffer-window current-file-buffer))
   )

  ;;show tags for current file
   (defun sb-toggle-tags-for-curren-file ()
    "toggle tags in speedbar buffer"
    (interactive)

    (if (sr-speedbar-exist-p)
        (sr-speedbar-close)
     (sb-show-tags-for-curren-file)    
    ))

  (global-set-key (kbd "<f3>")  'sb-toggle-tags-for-curren-file)
  ;(global-set-key (kbd "<f3>")  'sr-speedbar-toggle)
  (global-set-key (kbd "C-c t l") 'sb-show-tags-for-curren-file)

#+END_SRC


** settings for foldings

#+BEGIN_SRC emacs-lisp
  (defun  my-hs-folding-hook()
        (local-set-key (kbd "C-c z o") 'hs-show-block)
        (local-set-key (kbd "C-c z O") 'hs-show-all)
        (local-set-key (kbd "C-c z c") 'hs-hide-block)
        (local-set-key (kbd "C-c z C") 'hs-hide-all)
        (local-set-key (kbd "C-c SPC") 'hs-toggle-hiding)
        (hs-minor-mode t))

  ;;;;outline minor  mode
  (defun  my-outline-minor-mode-hook()
        (local-set-key (kbd "C-c z r") 'outline-show-subtree)
        (local-set-key (kbd "C-c z m") 'outline-hide-subtree)
        (local-set-key (kbd "C-c z R") 'outline-show-all)
        (local-set-key (kbd "C-c z M") 'outline-hide-other)
        (local-set-key (kbd "C-c z l") 'outline-hide-sublevels)
        (local-set-key (kbd "C-c z SPC") 'outline-toggle-children)
        (outline-minor-mode t))

  (defun  my-folding-hook()
      (my-hs-folding-hook)
      (my-outline-minor-mode-hook)
  )

  (add-hook 'c-mode-common-hook   'my-folding-hook)
  (add-hook 'emacs-lisp-mode-hook 'my-folding-hook)
  (add-hook 'java-mode-hook       'my-folding-hook)
  (add-hook 'lisp-mode-hook       'my-folding-hook)
  (add-hook 'perl-mode-hook       'my-folding-hook)
  (add-hook 'sh-mode-hook         'my-folding-hook)
  (add-hook 'python-mode-hook     'my-folding-hook)
#+END_SRC



** settings for tramp mode
;;; You can refer to files on other machines using a special file name syntax: 
;;;   /host:filename
;;;   /user@host:filename
;;;   /user@host#port:filename
;;;   /method:user@host:filename
;;;   /method:user@host#port:filename
#+BEGIN_SRC emacs-lisp
    (require 'tramp)
    (if (eq window-system 'w32)
            (setq tramp-default-method "plink")
      ;;(setq tramp-default-method "ssh")
      ;;use rsync for linux
      (setq tramp-default-method "rsync")
    )

    ;; avoid tramp hang
    ;;. Adding .* to tramp-shell-prompt-pattern is an easy fix 
    (setq tramp-shell-prompt-pattern (concat tramp-shell-prompt-pattern ".*"))

    ;;projectile slows down tramp mode, and set the following variable to fix the issue
    ;; https://emacs.stackexchange.com/questions/17543/tramp-mode-is-much-slower-than-using-terminal-to-ssh

    ;; (setq remote-file-name-inhibit-cache nil)
    ;; (setq vc-ignore-dir-regexp
    ;;    (format "%s\\|%s"
    ;;            vc-ignore-dir-regexp
    ;;            tramp-file-name-regexp))
    ;; (setq tramp-verbose 1)

    ;;;enable X11 window on local emacs
    ;(add-to-list 'tramp-remote-process-environment
    ;        (format "DISPLAY=%s" (getenv "DISPLAY")))
    ;(add-to-list 'tramp-remote-process-environment "192.168.3.100:0")

#+END_SRC

set up remote server
#+BEGIN_SRC emacs-lisp
   (require 'ido)
   (require 'subr-x)
   (defvar my-remote-hosts (make-hash-table :test 'equal)
     "Table of host aliases for IPs or other actual references.")

   ;; value is a list, which contains ipaddress, username, etc
   (puthash "ubuntu17" '("192.168.3.100" "shaobo")
            my-remote-hosts)
   (puthash "debian" '("192.168.3.117" "shaobo")
            my-remote-hosts)
   ;(puthash "debian" "192.168.3.117" my-remote-hosts)

   
   (defun my-connect-remote-server()
     (interactive)
     (let* ((remote-host-names  (hash-table-keys my-remote-hosts))
            (my-remote-host (format "%s"
                                    (if (and (fboundp #'ido-completing-read) 
                                             (not (fboundp #'helm-M-x)))
                                      (ido-completing-read "remote host:" remote-host-names)
                                    (completing-read "remote host:" remote-host-names))))
            (my-host-info (gethash my-remote-host my-remote-hosts))
            (my-tramp-connection (format "/%s@%s:~"
                                         (nth 1 my-host-info)
                                         (car my-host-info))))
           
          (message "%s" my-tramp-connection)
          (find-file my-tramp-connection)
      )
   )
#+END_SRC

define function to shutdown emacs server instance
#+BEGIN_SRC emacs-lisp
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (kill-emacs)
  )
#+END_SRC


** window management
*** set up ace widow for switching between windows

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

#+END_SRC
   
*** setting for jump between windows

;; move between different windows
;; using windmove command
;; move between windows using Shift + left/right/up/down arrorw key
;(when (fboundp 'windmove-default-keybindings)
;  (windmove-default-keybindings))

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)

  (global-set-key (kbd "C-c w h") 'windmove-left)
  (global-set-key (kbd "C-c w l") 'windmove-right)
  (global-set-key (kbd "C-c w k") 'windmove-up)
  (global-set-key (kbd "C-c w j") 'windmove-down)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "<f10>") 'other-frame)
  (global-set-key (kbd "<f2>")  'other-window)
  (global-set-key (kbd "<f9>")  'other-frame)
#+END_SRC


** cscope, clang format, and YCM

*** key bindings for cscope
   C-c s s Find symbol.
   C-c s = Find assignments to this symbol
   C-c s d Find global definition.
   C-c s g Find global definition (alternate binding).
   C-c s G Find global definition without prompting.
   C-c s c Find functions calling a function.
   C-c s C Find called functions (list functions called from a function).
   C-c s t Find text string.
   C-c s e Find egrep pattern.
   C-c s f Find a file.
   C-c s i Find files #including a file.

   C-c s a Set initial directory.
   C-c s A Unset initial directory.

   C-c s b Display cscope buffer.
   C-c s B Auto display cscope buffer toggle.
   C-c s n Next symbol.
   C-c s N Next file.
   C-c s p Previous symbol.
   C-c s P Previous file.
   C-c s u Pop mark.
   
   C-c s L Create list of files to index.
   C-c s I Create list and index.
   C-c s E Edit list of files to index.
   C-c s W Locate this buffer’s cscope directory (“W” –> “where”).
   C-c s S Locate this buffer’s cscope directory. (alternate binding: “S” –> “show”).
   C-c s T Locate this buffer’s cscope directory. (alternate binding: “T” –> “tell”).
   C-c s D Dired this buffer’s directory.

  on windows, using command in windows command prompt 
  dir /S /B *.h *.cpp *.hpp *.c  > cscope.files
  to list files,  
  then use the following command to build cscope database
  cscope.exe -b -i cscope.files -f cscope.out


*** settings for clang format

#+BEGIN_SRC emacs-lisp
  (require 'clang-format)
  ;;; (global-set-key (kbd "C-c i") 'clang-format-region)
  ;;; (global-set-key (kbd "C-c u") 'clang-format-buffer)
  (global-set-key (kbd "C-c c r") 'clang-format-region)
  (global-set-key (kbd "C-c c b") 'clang-format-buffer)

  ;;(setq clang-format-style-option "llvm")
  (setq clang-format-style-option "file")

  (defun clang-format-buffer-smart ()
  "Reformat buffer if .clang-format exists in the projectile root."
  (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
    (clang-format-buffer)))

  (defun clang-format-buffer-smart-on-save ()
  "Add auto-save hook for clang-format-buffer-smart."
  (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))

  (add-hook 'c++-mode-hook #'clang-format-buffer-smart-on-save)
  (add-hook 'c-mode-hook #'clang-format-buffer-smart-on-save)

#+END_SRC
    

*** settings for idutils
#+BEGIN_SRC emacs-lisp
    (autoload 'gid "idutils" nil t)
#+END_SRC

    
*** settings for ycmd
#+BEGIN_SRC emacs-lisp
  ;;;set ycmd previx to C-c y,  
  ;;C-c y C-h for all key-bindings for ycmd 
  (setq ycmd-keymap-prefix (kbd "C-c y"))
  ;(define-key ycmd-mode-map (kbd "C-c a s") nil)

  ;; ;;don't use ymcd for MS windows OS
  (require 'ycmd)
  (add-hook 'after-init-hook #'global-ycmd-mode)
  ;(add-hook 'c++-mode-hook 'ycmd-mode)

  (set-variable 'ycmd-min-num-chars-for-completion 0)
  (set-variable 'ycmd-max-num-identifier-candidates 200)
#+END_SRC

    In order to make ycm work properly, we need make an .ycm_extra_conf.py file in the root of the project, and 
    the content of .ycm_extra_conf.py could be just like
    ===================================
    def FlagsForFile( filename, **kwargs ):
    return {
    'flags': [ '-x', 'c++' ]
    }
    ==================================

    specify how to run ycmd server

    note that while setting ycm related variables, we cannot use ~, and we have to use 
    expand-file-name/file-truename to expand it

     * Completion doesn't work with the C++ standard library headers

      This is caused by an issue with libclang that only affects some operating systems.
      Compiling with clang the binary will use the correct default header search paths
      but compiling with libclang.so (which YCM uses) does not.

      Mac OS X is normally affected, but there's a workaround in YCM for that specific OS.
      If you're not running that OS but still have the same problem, continue reading.

      The workaround is to call echo | clang -v -E -x c++ - and look at the paths under
      the #include <...> search starts here: heading. You should take those paths,
      prepend -isystem to each individual path and append them all to the list of
      flags you return from your FlagsForFile function in your .ycm_extra_conf.py file.

#+BEGIN_SRC emacs-lisp
  ;; We need set up path for python in OS so that correct version of python
  ;; is picked up
  (if (eq window-system 'w32)
    (set-variable 'ycmd-server-command `("python"  "-u"
				       ,(file-truename "~/.emacs.d/third-party/ycmd/ycmd")))
    (set-variable 'ycmd-server-command `("python" 
				       ,(file-truename "~/.emacs.d/third-party/ycmd/ycmd")))
  )

  ;; loading ycmd global configuration from ~/.emacs.d/third-party/.ycm_extra_conf.py
  (set-variable 'ycmd-global-config (file-truename "~/.emacs.d/third-party/.ycm_extra_conf.py"))

(defun ycmd-setup-completion-at-point-function ()
  "Setup `completion-at-point-functions' for `ycmd-mode'."
  (add-hook 'completion-at-point-functions
            #'ycmd-complete-at-point nil :local))

(add-hook 'ycmd-mode-hook #'ycmd-setup-completion-at-point-function)
#+END_SRC

  M-x ycmd-display-completions  ;; debug
  M-x company-complete  ;; mnaually run auto complete 

  ;;load project related .ycm_extra_conf.py 
  ;;(set-variable 'ycmd-extra-conf-whitelist `( ,(file-truename "<project-root>/*")))
  we use global .ycm_extra_conf.py, rather than project related .ycm_extra_conf.py,
  to simplify the settings. 

  Now a ycmd server will be automatically launched whenever it's needed. Generally, this 
  means whenever you visit a file with a supported major mode. You should not normally 
  need to manually start or stop a ycmd server.

  With a server running, you can now get completions for a point in a file using 
  ycmd-get-completions. This doesn't actually insert the completions; it just fetches 
  them from the server. It's not even an interactive function, so you can't really call 
  it while editing. If you just want to see the possible completions at a point, you 
  can try ycmd-display-completions which will dump a raw completion struct into a 
  buffer. This is more of a debugging tool than anything.

  The important settings are search-paths for head files for a given project. When compiling code,
  the compiler searchs for head files from a given set of path. In order to make ycmd work
  properly, we have to pass this set of path to FlagsForFile, which is defined at
  .ycm_extra_conf. 
  
  We can also put search paths inside .clang_complete. This is the preferred approach
  since we can easily support multiple projects witht the same .ycm_extra_conf.py.
  Note that we need place .clang_complete inside the root directory of the project.
  .ycm_extra_conf.py will automatically pick it up.

  In this case, we don't need to touch emacs settings for new projects; what we need to do
  is simply to add a .clang_complete file in the root of each project.
  
  We use absolute path inside .clang_complete 
  =========================================
-I/${HOME}/work/skia/skia/include
-I/${HOME}/work/skia/skia/include
-I/${HOME}/work/skia/skia/include/utils
  =========================================
  replace ${HOME} with your home directory; otherwise, python script .ycm_extra_conf.py may have
  difficulty to correctly parse .clang_complete file.


  If we make some changes in the headfile, such as adding new members to some class, it seems
  ycmd-based auto-completion does not automatically pick up newly added members. We have to 
  reload head file we modified by running command M-x revert-buffer in order to make 
  auto-completion work. 

  for example, we have test1.cpp, and head1.h
  head1.h
  =========================================
  A
  {
  public:
    void foo();
  private:
    int m_b;
  };
  ========================================

  test1.cpp
  =======================================
  #include <head1.h>
  int main()
  {
    A objA; 
    objA.           
    ### while we tried to auto complete, objA cannot recognized newly added members in class A, unless
    # we restart emacs or revert file head1.h by M-x revert-buffer

    return 0;
  }

  =======================================

  

*** settings for company-mode
;;; debug ycmd mode: M-x ycmd-show-debug-info

 completion framework
 https://tuhdo.github.io/c-ide.html

 General Usage: Completion will start automatically after you type a few letters. 
 Use M-n and M-p to select, <return> to complete or <tab> to complete the common part. 
 Search through the completions with C-s, C-r and C-o. Press M-(digit) to quickly 
 complete with one of the first 10 candidates. When the completion candidates are shown, 
 press <f1> to display the documentation for the selected candidate, or C-w to 
 see its source. Not all back-ends support this.

 The variable company-backends specifies a list of backends that company-mode 
 uses to retrieves completion candidates for you. 


#+BEGIN_SRC emacs-lisp
(require 'company-ycmd)

(with-eval-after-load 'company
  ;(define-key company-active-map (kbd "M-n") nil)
  ;(define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next) 		;;allow using C-n/p to select candidates
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

(company-ycmd-setup)
(add-hook 'after-init-hook #'global-company-mode)

(add-to-list 'company-backends 'company-c-headers)

;;;; Set always complete immediately
(setq company-idle-delay 0)

;;
;;;invoke company-complete comand
;;; M-x company-complete

#+END_SRC


*** Enable flycheck
    #+BEGIN_SRC emacs-lisp
      (require 'flycheck-ycmd)
      (flycheck-ycmd-setup)
      (add-hook 'after-init-hook #'global-flycheck-mode)    

      ;; Make sure the flycheck cache sees the parse results
      (add-hook 'ycmd-file-parse-result-hook 'flycheck-ycmd--cache-parse-results)

      (when (not (display-graphic-p))
        (setq flycheck-indication-mode nil))

      (require 'ycmd-eldoc)
      (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup)    
    #+END_SRC


*** auto-complete, yasnippet

    company-mode and auto-complete mode provide the similar feature; 
    we just need to enable one o the other; from emacs24 or later, 
    company-mode is the way to go
    ;;; M-x describe-function RET company-mode
    ;;; M-x describe-function RET auto-complete 

   
    M-x ac-complete
    M-x ac-stop
    M-x auto-complete-mode/global-auto-complete-mode
 
    #+BEGIN_SRC emacs-lisp
      ;;========================= settings for auto-complete =====================
      (require 'auto-complete)
      (require 'auto-complete-config)

      (define-key ac-completing-map "\M-/" 'ac-stop)
      ;(define-key ac-completing-map "\t" 'ac-complete)
      ;(define-key ac-completing-map "\r" nil)

      (setq ac-auto-start 1)      
      (setq ac-auto-show-menu 0.5) 

      (setq ac-use-menu-map t)
       ;; Default settings
      (define-key ac-menu-map "\C-n" 'ac-next)
      (define-key ac-menu-map "\C-p" 'ac-previous)

       ;;don't enable global-auto-complete-mode by default
       ;(ac-config-default)

      ;;========================= settings for yasnippet =====================
      (require 'yasnippet)
      (yas-global-mode t)

       ;; Package: smartparens
      (require 'smartparens-config)
      (show-smartparens-global-mode +1)
      (smartparens-global-mode 1)                                               

      ;; when you press RET, the curly braces automatically
      ;; add another newline
      (sp-with-modes '(c-mode c++-mode)
        (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
        (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                                  ("* ||\n[i]" "RET"))))
      ;;indent and white space
      ;; Package: clean-aindent-mode
      (require 'clean-aindent-mode)
      (add-hook 'prog-mode-hook 'clean-aindent-mode)

      ;; Package: dtrt-indent
      (require 'dtrt-indent)
      (dtrt-indent-mode 1) 
      (setq dtrt-indent-verbosity 0)

       ;; Package: ws-butler
      (require 'ws-butler)
      (add-hook 'c-mode-common-hook 'ws-butler-mode)
    #+END_SRC

    
*** set up semantic and ede for auto completion
#+BEGIN_SRC emacs-lisp
  ;;   (require 'cc-mode)
  ;;   (require 'semantic)

  ;;   (global-semanticdb-minor-mode 1)
  ;;   (global-semantic-idle-scheduler-mode 1)

  ;;   (semantic-mode 1)

  ;;   ;(semantic-add-system-include "/usr/include/boost" 'c++-mode)

  ;;   (require 'ede)
  ;;   (global-ede-mode)

  ;;    ;; get C/C++ headfile by runnning command
  ;; ;; `gcc -print-prog-name=cc1` -v
  ;; ;; `gcc -print-prog-name=cc1plus` -v

  ;;   (ede-cpp-root-project "project_root"
  ;;                         :file "~/work/skia/skia/project_root.ede"
  ;;                         :include-path '("/include"
  ;;                                         "/third_party/freetype/include") ;; add more include
  ;;                         ;; paths here
  ;;                         :system-include-path '("~/linux"))

#+END_SRC

    
*** settings for irony mode
    
    ycmd is a better choice, compared to irony mode; 
    in order to install irony-server, we also need to install a lot of dependencies. 
#+BEGIN_SRC emacs-lisp

  ;; ;;;irony mode for auto completion
  ;; (add-hook 'c++-mode-hook 'irony-mode)
  ;; (add-hook 'c-mode-hook 'irony-mode)
  ;; (add-hook 'objc-mode-hook 'irony-mode)

  ;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  ;; ;;;install clang depenency
  ;; ;;   sudo apt-get install libclang-dev


#+END_SRC

    
** configuration for helm
   #+BEGIN_SRC emacs-lisp
     (require 'helm)
     (require 'helm-config)
     (setq helm-buffer-max-length 50)

     ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
     ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
     ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
     (global-set-key (kbd "C-c h") 'helm-command-prefix)
     (global-unset-key (kbd "C-x c"))

     (global-unset-key (kbd "C-j"))
     (define-key helm-map (kbd "C-j") nil) ;

     ;;(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
     (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

     (when (executable-find "curl")
       (setq helm-google-suggest-use-curl-p t))

     (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
           helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
           helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
           helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
           helm-ff-file-name-history-use-recentf t
           helm-echo-input-in-header-line t)

     (defun spacemacs//helm-hide-minibuffer-maybe ()
       "Hide minibuffer in Helm session if we use the header line as input field."
       (when (with-helm-buffer helm-echo-input-in-header-line)
         (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
           (overlay-put ov 'window (selected-window))
           (overlay-put ov 'face
                        (let ((bg-color (face-background 'default nil)))
                          `(:background ,bg-color :foreground ,bg-color)))
           (setq-local cursor-type nil))))


     (add-hook 'helm-minibuffer-set-up-hook
               'spacemacs//helm-hide-minibuffer-maybe)

     (setq helm-autoresize-max-height 60)
     (setq helm-autoresize-min-height 20)
     (helm-autoresize-mode 1)


     (global-set-key (kbd "M-x") 'helm-M-x)
     (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
     ;;; you may need <right> or C-o to select a command


     (global-set-key (kbd "M-y") 'helm-show-kill-ring)

     (global-set-key (kbd "C-x b") 'helm-mini)
     (setq helm-buffers-fuzzy-matching t
           helm-recentf-fuzzy-match    t)

     (global-set-key (kbd "C-x C-f") 'helm-find-files)

     ;;;enable semantic mode to support helm helm semantic-or-imenu
     ;; (semantic-mode t)

     ;;; enable fuzzy matching for both semantics and Imenu list
     (setq helm-semantic-fuzzy-match t
           helm-imenu-fuzzy-match    t)

     ;;enable man page at points
     (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

     ;;helm-occur
     (global-set-key (kbd "C-c h o") 'helm-occur)

     ;;helm-apropos
     (setq helm-apropos-fuzzy-match t)

     ;;helm-mark-ring
     ;; C-<SPC> set mark
     (global-set-key (kbd "C-c h SPC") 'helm-all-mark-rings)

     ;;helm register
     (global-set-key (kbd "C-c h x") 'helm-register)

     ;;helm-surfraw

     ;;helm-google-suggested
     (global-set-key (kbd "C-c h g") 'helm-google-suggest)

     ;; C-c h b    'helm-resume     Resumes a previous helm session
     ;;(global-set-key (kbd "C-c h b") 'helm-resume)

     ;; helm-filtered-bookmarks
     ;;(global-set-key (kbd "C-c h B") 'helm-filtered-bookmarks)


     ;;;helm-eshell-history
     (require 'helm-eshell)

     (add-hook 'eshell-mode-hook
               #'(lambda ()
                   (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))

     ;;;helm-comint-input-ring
     ;; Similar to helm-eshell-history, but used for M-x shell.
     ;; (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)

     ;; search ring in helm
     ;; In the search mode, move to the minibuffer, press C-r or C-c C-l to run 
     ;; helm-minibuffer-history, and this will display helm search-ring for completion
     ;;;helm-mini-buffer-history
     (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

     (helm-mode 1)
        
   #+END_SRC

*** Key bindings for helm
;; Key Binding  Command         Description
;; M-x  helm-M-x        List commands
;; M-y  helm-show-kill-ring     Shows the content of the kill ring
;; C-x b        helm-mini       Shows open buffers, recently opened files
;; C-x C-f      helm-find-files         The helm version of find-file
;; C-s  helm-ff-run-grep        Run grep from within helm-find-files
;; C-c h i      helm-semantic-or-imenu  Helm interface to semantic/imenu
;; C-c h m      helm-man-woman  Jump to any man entry
;; C-c h /      helm-find       Helm interface to find
;; C-c h l      helm-locate     Helm interface to locate
;; C-c h o      helm-occur      Helm interface for occur
;; C-c h a      helm-apropos    Describes commands, functions, variables, …
;; C-c h h g    helm-info-gnus
;; C-c h h i    helm-info-at-point
;; C-c h h r    helm-info-emacs
;; C-c h <tab>  helm-lisp-completion-at-point   Provides a list of available functions
;; C-c h B      helm-resume     Resumes a previous helm session
;; C-h SPC      helm-all-mark-rings     Views contents of local and global mark rings
;; C-c h r      helm-regex      Visualizes regex matches
;; C-c h x      helm-register   Shows content of registers
;; C-c h t      helm-top        Helm interface to top
;; C-c h s      helm-surfraw    Command line interface to many web search engines
;; C-c h g      helm-google-suggest     Interactively enter search terms and get results from Google in helm buffer
;; C-c h c      helm-color      Lists all available faces
;; C-c h M-:    helm-eval-expression-with-eldoc         Get instant results for Emacs lisp expressions in the helm buffer
;; C-c h C-,    helm-calcul-expression  Helm interface to calc
;; C-c C-l      helm-eshell-history     Interface to eshell history
;; C-c C-l      helm-comint-input-ring  Interface to shell history
;; C-c C-l      helm-mini-buffer-history        Interface to mini-buffer history

;;; C-u helm-find-files ;;; display a list of visited directories
;;; during a helm-find-files session, C-c h , get a list of visited files



** settings for projectile
   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)

     (setq projectile-completion-system 'helm)

     (setq projectile-switch-project-action 'helm-projectile)
     (setq projectile-enable-caching t)

     ;;;for windoes
     (if (eq window-system 'w32)
             (setq projectile-indexing-method 'alien)
     )

     (add-to-list 'projectile-globally-ignored-directories ".git")
     (add-to-list 'projectile-globally-ignored-directories "3rdparty")
     (add-to-list 'projectile-globally-ignored-directories "build")
     (add-to-list 'projectile-globally-ignored-directories "lib")

     ;;; TAB/C-i  will run helm-execute-persistent-action
     ;(define-key helm-projectile-projects-map (kbd "TAB") 'nil) ;  release tab
     ;(define-key helm-projectile-projects-map (kbd "C-i") 'helm-execute-persistent-action);

     ;;projectile slows down tramp mode, and set the following variable to fix the issue
     ;; https://emacs.stackexchange.com/questions/17543/tramp-mode-is-much-slower-than-using-terminal-to-ssh
     (setq projectile-mode-line "Projectile")

     (helm-projectile-on)
        
   #+END_SRC

*** virtual directory manager
    when in helm-projectile-find-file/dir session, we can use C-c f, C-c a  or C-c d
    to create/add/remove files for a virtual directory manager

*** key binings
;;; more bindings are available by running C-c p C-h
**** a few commands  for projectile
;;; more can be found at https://projectile.readthedocs.io/en/latest/usage/
;;; and https://tuhdo.github.io/helm-projectile.html
;;; C-c p h     helm-projectile     Helm interface to projectile
;;; C-c p p     helm-projectile-switch-project  Switches to another projectile project
;;; C-c p f     helm-projectile-find-file   Lists all files in a project
;;; C-c p F     helm-projectile-find-file-in-known-projects     Find file in all known projects
;;; C-c p g     helm-projectile-find-file-dwim  Find file based on context at point
;;; C-c p d     helm-projectile-find-dir    Lists available directories in current project
;;; C-c p e     helm-projectile-recentf     Lists recently opened files in current project
;;; C-c p a     helm-projectile-find-other-file     Switch between files with same name but different extensions
;;; C-c p i     projectile-invalidate-cache     Invalidate cache
;;; C-c p z     projectile-cache-current-file   Add the file of current selected buffer to cache
;;; C-c p b     helm-projectile-switch-to-buffer    List all open buffers in current project

;;; C-c p !     Runs shell-command in the root directory of the project.
;;; C-c p &     Runs async-shell-command in the root directory of the project.
;;; C-c p C     Runs a standard configure command for your type of project.
;;; C-c p c     Runs a standard compilation command for your type of project.
;;; C-c p s g   helm-projectile-grep    Searches for symbol starting from project root
;;; C-c p s a   helm-projectile-ack     Same as above but using ack
;;; C-c p s s   helm-projectile-ag  Same as above but using ag


;;;   C-c p o     Runs multi-occur on all project buffers currently open.
;;;   C-c p b     Display a list of all project buffers currently open.
;;;   C-c p r     Runs interactive query-replace on all files in the projects.
;;;   C-c p R     Regenerates the projects TAGS file.
;;;   C-c p j     Find tag in project's TAGS file.
;;;   C-c p k     Kills all project buffers.
;;;   C-c p D     Opens the root of the project in dired.



** settings for helm-gtags

#+BEGIN_SRC emacs-lisp
  (setq
   ;;helm-gtags-path-style 'relative
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key (kbd "C-c t") 
   helm-gtags-suggested-key-mapping t
   helm-gtags-cache-max-result-size (* 300 1024 1024)
   )

  (with-eval-after-load 'helm-gtags
     (define-key helm-gtags-mode-map (kbd "C-c t g")   nil)
     (define-key helm-gtags-mode-map (kbd "C-c t p")   nil)
     (define-key helm-gtags-mode-map (kbd "C-c t t")   nil)
     (define-key helm-gtags-mode-map (kbd "C-t")   nil)

     (define-key helm-gtags-mode-map (kbd "C-c t i") 'helm-gtags-find-files)
     (define-key helm-gtags-mode-map (kbd "C-c t t")   'helm-gtags-find-pattern)

          ;;;  helm-gtags-dwim ()
          ;;;     "Find by context. Here is
          ;;;   - on include statement then jump to included file
          ;;;   - on symbol definition then jump to its references
          ;;;   - on reference point then jump to its definition."

     (define-key helm-gtags-mode-map (kbd "C-c t g")   'helm-gtags-dwim)
     ;;parse/analyze current file
     (define-key helm-gtags-mode-map (kbd "C-c t a")   'helm-gtags-parse-file)
     (define-key helm-gtags-mode-map (kbd "C-c t j")   'helm-gtags-find-tag-from-here)

     ;;show all tags candidates and select one
     (define-key helm-gtags-mode-map (kbd "C-c t c")   'helm-gtags-select)

     ;;; other mappings are f, s, r, d
     
     (define-key helm-gtags-mode-map (kbd "C-c t k")   'helm-tags-show-stack)
     (define-key helm-gtags-mode-map (kbd "C-c t K")   'helm-gtags-pop-stack)

     (define-key helm-gtags-mode-map (kbd "C-c t n")   'helm-gtags-next-history)
     (define-key helm-gtags-mode-map (kbd "C-c t p")   'helm-gtags-previous-history)
  )

  ;;; Before using the ggtags or helm-gtags, remember to create 
  ;;; a GTAGS database by running gtags at your project root in terminal: 

  (require 'helm-gtags)

  (defun  my-helm-gtags-hook()
        (helm-gtags-mode t))

  (add-hook 'c-mode-common-hook   'my-helm-gtags-hook)
  (add-hook 'emacs-lisp-mode-hook 'my-helm-gtags-hook)
  (add-hook 'java-mode-hook       'my-helm-gtags-hook)
  (add-hook 'lisp-mode-hook       'my-helm-gtags-hook)
  (add-hook 'perl-mode-hook       'my-helm-gtags-hook)
  (add-hook 'sh-mode-hook         'my-helm-gtags-hook)
  (add-hook 'python-mode-hook     'my-helm-gtags-hook)

#+END_SRC

*** Default Key Mapping
;;;    Key     Command
;;;    Prefix h    helm-gtags-display-browser
;;;    Prefix C-]  helm-gtags-find-tag-from-here
;;;    Prefix C-t  helm-gtags-pop-stack
;;;    Prefix i    helm-gtags-find-files
;;;    Prefix f    helm-gtags-parse-file
;;;    Prefix g    helm-gtags-find-pattern
;;;    Prefix s    helm-gtags-find-symbol
;;;    Prefix r    helm-gtags-find-rtag
;;;    Prefix t    helm-gtags-find-tag
;;;    Prefix d    helm-gtags-find-tag
;;;    M-*     helm-gtags-pop-stack
;;;    M-.     helm-gtags-find-tag
;;;    C-x 4 .     helm-gtags-find-tag-other-window

  ;;;   (let ((command-table '(("h" . helm-gtags-display-browser)
  ;;;                          ("P" . helm-gtags-find-files)
  ;;;                          ("f" . helm-gtags-parse-file)
  ;;;                          ("g" . helm-gtags-find-pattern)
  ;;;                          ("s" . helm-gtags-find-symbol)
  ;;;                          ("r" . helm-gtags-find-rtag)
  ;;;                          ("t" . helm-gtags-find-tag)
  ;;;                                             ("d" . helm-gtags-find-tag)))
  ;;;     (define-key helm-gtags-mode-map "\C-]" 'helm-gtags-find-tag-from-here)
  ;;;     (define-key helm-gtags-mode-map "\C-t" 'helm-gtags-pop-stack)
  ;;;     (define-key helm-gtags-mode-map "\e*" 'helm-gtags-pop-stack)
  ;;;     (define-key helm-gtags-mode-map "\e." 'helm-gtags-find-tag)
  ;;;     (define-key helm-gtags-mode-map "\C-x4." 'helm-gtags-find-tag-other-window)))
    

** settings for js
  #+BEGIN_SRC emacs-lisp
    (require 'js2-mode)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
    (add-hook 'js2-mode-hook #'my-folding-hook)

    ;;key bindings for js2 mode
    (define-key js2-mode-map (kbd "C-c j h") #'js2-mode-hide-element)
    (define-key js2-mode-map (kbd "C-c j s") #'js2-mode-show-element)
    (define-key js2-mode-map (kbd "C-c j a") #'js2-mode-show-all)
    (define-key js2-mode-map (kbd "C-c j f") #'js2-mode-toggle-hide-functions)
    (define-key js2-mode-map (kbd "C-c j c") #'js2-mode-toggle-hide-comments)
    (define-key js2-mode-map (kbd "C-c j t") #'js2-mode-toggle-element)
    (define-key js2-mode-map (kbd "C-c j w") #'js2-mode-toggle-warnings-and-errors)

    (require 'js2-refactor)
    (require 'xref-js2)

    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    ;;(js2r-add-keybindings-with-prefix "C-c C-r")
    (js2r-add-keybindings-with-prefix "C-c j r")

    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

    ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
    ;; unbind it.
    (define-key js-mode-map (kbd "M-.") nil)

    (add-hook 'js2-mode-hook (lambda ()
                               (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))

  #+END_SRC
    
** settings for backup

;; make backup to a designated dir, mirroring the full path
;; http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html
;; (defun my-backup-file-name (fpath)
;;   "Return a new file path of a given file path.
;;    If the new path's directories does not exist, create them."
;;   (let* (
;; 	 (backupRootDir "~/.emacs.d/emacs-backup/")
;; 	 (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
;; 	 ;;(backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
;; 	 (backupFilePath (replace-regexp-in-string "\\\\" "/" (concat backupRootDir filePath "~") ))
;; 	 )
;;     (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
;;     backupFilePath
;;     )
;;   )
 
;; (setq make-backup-file-name-function 'my-backup-file-name)

#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
  (setq backupDir "~/.emacs.backup")

  (if (not (file-directory-p backupDir)) 
      (make-directory backupDir))

  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
     `(("." . ,backupDir))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+END_SRC


** miscellaneous
   
;;;  (require 'ido)
;;;  
;;;  (setq ido-enable-flex-matching t)
;;;  (setq ido-everywhere t)
;;;  (ido-mode t)
;;;  (setq max-mini-window-height 0.5)

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (setq linum-format "%d ")
  (global-set-key (kbd "C-c l n") 'linum-mode)

  ;;; load built-in library dired-x
  (require 'dired-x)

  ;;show row/column in the mode line
  (setq column-number-mode t)

  ;;; remove trailling whitespace
  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (setq case-fold-search t)   ; make searches case insensitive


  (setq Buffer-menu-name-width 50)

  ;;force horizontally splitting windows
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)

  ;;;show fullpath
  (setq frame-title-format
        (list (format "%s %%S: %%j " (system-name))
              '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

 ;; show total line number in the mode line
 (add-to-list 'mode-line-front-space '("" (:eval (format "%s" (line-number-at-pos (point-max))))))

  ;;show fullpath in the headline
    (defmacro with-face (str &rest properties)
      `(propertize ,str 'face (list ,@properties)))

    (defun sl/make-header ()
      ""
      (let* ((sl/full-header (abbreviate-file-name buffer-file-name))
             (sl/header (file-name-directory sl/full-header))
             (sl/drop-str "[...]"))
        (if (> (length sl/full-header)
               (window-body-width))
            (if (> (length sl/header)
                   (window-body-width))
                (progn
                  (concat (with-face sl/drop-str
                                     :background "blue"
                                     :weight 'bold
                                     )
                          (with-face (substring sl/header
                                                (+ (- (length sl/header)
                                                      (window-body-width))
                                                   (length sl/drop-str))
                                                (length sl/header))
                                     ;; :background "red"
                                     :weight 'bold
                                     )))
              (concat (with-face sl/header
                                 ;; :background "red"
                                 :foreground "#8fb28f"
                                 :weight 'bold
                                 )))
          (concat (with-face sl/header
                             ;; :background "green"
                             ;; :foreground "black"
                             :weight 'bold
                             :foreground "#8fb28f"
                             )
                  (with-face (file-name-nondirectory buffer-file-name)
                             :weight 'bold
                             ;; :background "red"
                             )))))

    (defun sl/display-header ()
      (setq header-line-format
            '("" ;; invocation-name
              (:eval (if (buffer-file-name)
                         (sl/make-header)
                       "%b"))))) 

    (add-hook 'buffer-list-update-hook
              'sl/display-header)
#+END_SRC


*** repeat commands
On the terminal C-x z will suspend emacs; so we remap keys , and bound C-c z to repeat.
press C-c Z to repeat the prevous command
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c z")  'repeat)
#+END_SRC

   
* define some custom functions and key bindings

** open new line like in vi
   Behave like vi's o command
#+BEGIN_SRC emacs-lisp
(defun open-next-line (arg)
  "Move to the next line and then opens a line.
    See also `newline-and-indent'."
  (interactive "p")
  (end-of-line)
  (open-line arg)
  (next-line 1)
  (indent-according-to-mode))

(global-set-key (kbd "C-c l o") 'open-next-line)
#+END_SRC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Behave like vi's O command
#+BEGIN_SRC emacs-lisp
(defun open-previous-line (arg)
  "Open a new line before the current one. 
     See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line)
  (open-line arg)
  (indent-according-to-mode))

(global-set-key (kbd "C-c l O") 'open-previous-line)
#+END_SRC



** copy/kill lines and related

#+BEGIN_SRC emacs-lisp
(defun copy-current-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
          (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

;; optional key binding
(global-set-key (kbd "C-c y l") 'copy-current-line)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun kill-current-line(arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-region (line-beginning-position)
          (line-beginning-position (+ 1 arg)))
  (message "%d line%s deleted" arg (if (= 1 arg) "" "s")))

;; optional key binding

(global-set-key (kbd "C-c d l") 'kill-current-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun copy-current-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
          (line-beginning-position (+ 1 arg)))
  (message "%d line%s copied" arg (if (= 1 arg) "" "s")))

;; optional key binding
(global-set-key (kbd "C-c y l") 'copy-current-line)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun kill-current-line(arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-region (line-beginning-position)
          (line-beginning-position (+ 1 arg)))
  (message "%d line%s deleted" arg (if (= 1 arg) "" "s")))

;; optional key binding
(global-set-key (kbd "C-c d l") 'kill-current-line)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun copy-current-word(&optional arg)
  "Copy the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'word))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-ring-save beg end)
)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun kill-current-word(&optional arg)
  "kill the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'word))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-region beg end)
)

;(global-set-key (kbd "C-c w y") 'copy-current-word)
;(global-set-key (kbd "C-c w d") 'kill-current-word)

(global-set-key (kbd "C-c y w") 'copy-current-word)
(global-set-key (kbd "C-c d w") 'kill-current-word)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun copy-current-sexp(&optional arg)
  "Copy the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'sexp))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-ring-save beg end)
)

(defun kill-current-sexp(&optional arg)
  "kill the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'sexp))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-region beg end)
)

(global-set-key (kbd "C-c y e") 'copy-current-sexp)
(global-set-key (kbd "C-c d e") 'kill-current-sexp)

#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun copy-current-sentence(&optional arg)
  "Copy the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'sentence))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-ring-save beg end)
)

(defun kill-current-sentence(&optional arg)
  "kill the word under cursor."
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'sentence))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-region beg end)
)

(global-set-key (kbd "C-c y E") 'copy-current-sentence)
(global-set-key (kbd "C-c d E") 'kill-current-sentence)

#+END_SRC

*** comment
    
;;;  (defun copy-sexp-as-kill (&optional arg)
;;;    "Save the sexp following point to the kill ring.
;;;  ARG has the same meaning as for `kill-sexp'."
;;;    (interactive "p")
;;;    (save-excursion
;;;      (let ((orig-point (point)))
;;;        (forward-sexp (or arg 1))
;;;        (kill-ring-save orig-point (point)))))

;;;========================================================================
;;;    (defun copy-current-parenthesis(&optional arg)
;;;      "Copy content inside parenthesis"
;;;      (interactive "p")
;;;    
;;;      (save-excursion
;;;          (if (not (string-equal (char-to-string (char-after (point))) "("))
;;;              (search-backward "(")
;;;          )
;;;    
;;;          (let ((beg (+ (point) 1)))
;;;                (search-forward ")")
;;;                (kill-ring-save beg (- (point) 1))
;;;           )
;;;      )
;;;    )
;;;    
;;;    (defun kill-current-parenthesis(&optional arg)
;;;      "Kill content inside parenthesis"
;;;      (interactive "p")
;;;    
;;;      (save-excursion
;;;          (if (not (string-equal (char-to-string (char-after (point))) "("))
;;;              (search-backward "(")
;;;          )
;;;    
;;;          (let ((beg (+ (point) 1)))
;;;                (search-forward ")")
;;;                (kill-region  beg (- (point) 1))
;;;          )
;;;      )
;;;    )
;;;    
;;;    (global-set-key (kbd "C-c y p") 'copy-current-parenthesis)
;;;    (global-set-key (kbd "C-c d p") 'kill-current-parenthesis)

*** other related customized functions
#+BEGIN_SRC emacs-lisp
(defun copy-current-parenthesis(&optional arg)
  "Copy content inside parenthesis"
  (interactive "p")

   (setq bounds (bounds-of-thing-at-point 'list))
   (setq beg (+ (car bounds) 1))
   (setq end (- (cdr bounds) 1))
   (kill-ring-save beg end)
)

(defun kill-current-parenthesis(&optional arg)
  "Kill content inside parenthesis"
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'list))
   (setq beg (+ (car bounds) 1))
   (setq end (- (cdr bounds) 1))
   (kill-region beg end)
)


(defun copy-current-parenthesis-p(&optional arg)
  "Copy content inside parenthesis, including parenthesis"
  (interactive "p")

   (setq bounds (bounds-of-thing-at-point 'list))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-ring-save beg end)
)

(defun kill-current-parenthesis-p(&optional arg)
  "Kill content inside parenthesis, including parenthesis"
  (interactive "p")
   (setq bounds (bounds-of-thing-at-point 'list))
   (setq beg (car bounds))
   (setq end (cdr bounds))
   (kill-region beg end)
)

;;copy backet
(global-set-key (kbd "C-c y b") 'copy-current-parenthesis)
(global-set-key (kbd "C-c d b") 'kill-current-parenthesis)

(global-set-key (kbd "C-c y B") 'copy-current-parenthesis-p)
(global-set-key (kbd "C-c d B") 'kill-current-parenthesis-p)

(global-set-key (kbd "C-M-^") 'scroll-other-window-down)

(global-set-key (kbd "C-c g t") #'beginning-of-buffer)
(global-set-key (kbd "C-c g b") #'end-of-buffer)

#+END_SRC

;;;==========================================================


;; (global-unset-key (kbd "C-a"))
;; (global-unset-key (kbd "C-e"))
;; (global-unset-key (kbd "M-a"))
;; (global-unset-key (kbd "M-e"))


;; (global-set-key (kbd "M-a l") 'move-beginning-of-line)
;; (global-set-key (kbd "M-e l") 'move-end-of-line)

;; (global-set-key (kbd "M-a S") 'c-beginning-of-statement)
;; (global-set-key (kbd "M-e S") 'c-end-of-statement)


;; (global-set-key (kbd "M-a s") 'backward-sexp)
;; (global-set-key (kbd "M-e s") 'forward-sexp)


;; (global-set-key (kbd "M-a f") 'c-beginning-of-defun)
;; (global-set-key (kbd "M-e f") 'c-end-of-defun)


;; (global-set-key (kbd "M-a p") 'backward-paragraph)
;; (global-set-key (kbd "M-e p") 'forward-paragraph)

;; (global-set-key (kbd "M-a P") 'backward-page)
;; (global-set-key (kbd "M-e P") 'forward-page)


;; (global-set-key (kbd "M-a g") 'beginning-of-buffer)
;; (global-set-key (kbd "M-e g") 'end-of-buffer)


;; ;;; use C-a, and C-e to move forth/back one char
;; (global-unset-key (kbd "C-b"))
;; (global-unset-key (kbd "C-f"))
;; (global-set-key (kbd "C-a") 'backward-char)
;; (global-set-key (kbd "C-e") 'forward-char)


;; ;;;use C-b and C-f to scroll to next/previous screen
;; ;;(global-unset-key (kbd "C-v"))
;; ;;(global-unset-key (kbd "M-v"))

;; ;;;originally binding on move back/forth over sexp
;; (global-unset-key (kbd "C-M-b"))
;; (global-unset-key (kbd "C-M-f"))

;; (global-set-key (kbd "C-b") 'scroll-down-command)
;; (global-set-key (kbd "C-f") 'scroll-up-command)

;; (global-set-key (kbd "C-M-f") 'scroll-other-window)
;; (global-set-key (kbd "C-M-b") 'scroll-other-window-down)

;;;;=======================================================
;;; move to the top/middle/bottom of the screen 

#+BEGIN_SRC emacs-lisp
(defun my-move-to-top(&optional arg)
  (interactive "p")
  (move-to-window-line 0) 
)

(defun my-move-to-middle(&optional arg)
  (interactive "p")
  (move-to-window-line nil) 
)

(defun my-move-to-bottom(&optional arg)
  (interactive "p")
  (move-to-window-line -1) 
)

(global-set-key (kbd "C-c w t") 'my-move-to-top)   ;;;top of the screen
(global-set-key (kbd "C-c w m") 'my-move-to-middle)   ;;;middle of the screen
(global-set-key (kbd "C-c w b") 'my-move-to-bottom)   ;;;bottom of the screen


;;; move to the current line to the top/middle/bottom of the screen 

(defun my-move-line-to-top(&optional arg)
  (interactive "p")
  (recenter 0.0) 
)

(defun my-move-line-to-middle(&optional arg)
  (interactive "p")
  (recenter) 
)

(defun my-move-line-to-bottom(&optional arg)
  (interactive "p")
  (recenter -1) 
)

(global-set-key (kbd "C-c l t") 'my-move-line-to-top)   ;;;move the line to the top of the screen
(global-set-key (kbd "C-c l m") 'recenter)              ;;;move the line to the middle of the screen
(global-set-key (kbd "C-c l b") 'my-move-line-to-bottom) ;;;move the line to the bottom of the screen

#+END_SRC


